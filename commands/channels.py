from aiogram import Router, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from storage import supabase_db
from commands import TEXTS
import asyncio

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
def get_channels_main_menu(lang: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="channels_list")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_add")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_remove")],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞", callback_data="channels_check_admin")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

@router.message(Command("channels"))
async def cmd_channels(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = supabase_db.db.ensure_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    # Parse subcommand
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        # Show main channels menu
        await show_channels_menu(message, user, lang)
    elif args[0] == "add" and len(args) > 1:
        await add_channel_direct(message, user, lang, args[1])
    elif args[0] == "remove" and len(args) > 1:
        await remove_channel_direct(message, user, lang, args[1])
    elif args[0] == "list":
        await list_channels_direct(message, user, lang)
    else:
        await message.answer(TEXTS[lang]['channels_unknown_command'])

async def show_channels_menu(message: Message, user: dict, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    text = "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_channels_main_menu(lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "channels_list")
async def callback_list_channels(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    await list_channels_callback(callback, user, lang)

@router.callback_query(F.data == "channels_add")
async def callback_add_channel(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    text = ("‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `-1001234567890` –∏–ª–∏ `@mychannel`\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!")
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="channels_menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "channels_remove")
async def callback_remove_channel(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    await show_channels_for_removal(callback, user, lang)

@router.callback_query(F.data == "channels_check_admin")
async def callback_check_admin_rights(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    await check_admin_rights_all(callback, user, lang)

@router.callback_query(F.data == "channels_menu")
async def callback_channels_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    text = "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_channels_main_menu(lang)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

async def list_channels_callback(callback: CallbackQuery, user: dict, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ callback"""
    project_id = user.get("current_project")
    if not project_id:
        text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        return
    
    channels = supabase_db.db.list_channels(project_id=project_id)
    if not channels:
        text = ("üìã **–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤**\n\n"
                "‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_add")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channels_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        return
    
    text = "üìã **–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤**\n\n"
    buttons = []
    
    for i, channel in enumerate(channels, 1):
        admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
        text += f"{i}. {admin_status} **{channel['name']}**\n"
        text += f"   ID: `{channel['chat_id']}`\n"
        if channel.get('username'):
            text += f"   @{channel['username']}\n"
        text += "\n"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        buttons.append([InlineKeyboardButton(
            text=f"‚öôÔ∏è {channel['name'][:20]}...", 
            callback_data=f"channel_manage:{channel['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channels_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

async def list_channels_direct(message: Message, user: dict, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    project_id = user.get("current_project")
    if not project_id:
        await message.answer(TEXTS[lang]['channels_no_channels'])
        return
    
    channels = supabase_db.db.list_channels(project_id=project_id)
    if not channels:
        await message.answer(TEXTS[lang]['channels_no_channels'])
        return
    
    text = TEXTS[lang]['channels_list_title'] + "\n"
    for i, channel in enumerate(channels, 1):
        admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
        text += f"{i}. {admin_status} " + TEXTS[lang]['channels_item'].format(
            name=channel['name'], 
            id=channel['chat_id']
        ) + "\n"
    
    await message.answer(text)

async def show_channels_for_removal(callback: CallbackQuery, user: dict, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    project_id = user.get("current_project")
    if not project_id:
        text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channels_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        return
    
    channels = supabase_db.db.list_channels(project_id=project_id)
    if not channels:
        text = "‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channels_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        return
    
    text = "üóë **–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    buttons = []
    
    for channel in channels:
        buttons.append([InlineKeyboardButton(
            text=f"üóë {channel['name']}", 
            callback_data=f"remove_channel_confirm:{channel['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channels_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

async def check_admin_rights_all(callback: CallbackQuery, user: dict, lang: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    project_id = user.get("current_project")
    if not project_id:
        text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channels_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        return
    
    channels = supabase_db.db.list_channels(project_id=project_id)
    if not channels:
        text = "‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channels_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        return
    
    text = "üîÑ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...**\n\n"
    await callback.message.edit_text(text, parse_mode="Markdown")
    
    results = []
    for channel in channels:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            chat_member = await callback.bot.get_chat_member(channel['chat_id'], callback.bot.id)
            is_admin = chat_member.status in ['administrator', 'creator']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            supabase_db.db.update_channel_admin_status(channel['id'], is_admin)
            
            status = "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else "‚ùå –ù–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            results.append(f"**{channel['name']}**: {status}")
            
        except Exception as e:
            results.append(f"**{channel['name']}**: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    text = "üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:**\n\n" + "\n".join(results)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channels_menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@router.message(F.text)
async def handle_channel_input(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–∞–Ω–∞–ª–∞
    # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FSM states
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ username
    if text.startswith('@') or (text.startswith('-') and text[1:].isdigit()):
        user_id = message.from_user.id
        user = supabase_db.db.get_user(user_id)
        lang = user.get("language", "ru") if user else "ru"
        
        await add_channel_direct(message, user, lang, text)

async def add_channel_direct(message: Message, user: dict, lang: str, identifier: str):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é"""
    project_id = user.get("current_project")
    if not project_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        if identifier.startswith("@"):
            chat = await message.bot.get_chat(identifier)
        else:
            chat_id = int(identifier)
            chat = await message.bot.get_chat(chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
        try:
            user_member = await message.bot.get_chat_member(chat.id, message.from_user.id)
            user_is_admin = user_member.status in ['administrator', 'creator']
        except:
            user_is_admin = False
        
        if not user_is_admin:
            await message.answer(
                "‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞**\n\n"
                "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
                parse_mode="Markdown"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        try:
            chat_member = await message.bot.get_chat_member(chat.id, message.bot.id)
            is_admin = chat_member.status in ['administrator', 'creator']
        except:
            is_admin = False
        
        if not is_admin:
            await message.answer(
                "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n"
                "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –º–æ–∂–Ω–æ, –Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.\n\n"
                "–°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É.",
                parse_mode="Markdown"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        channel = supabase_db.db.add_channel(
            user_id=message.from_user.id,
            chat_id=chat.id,
            name=chat.title or chat.username or str(chat.id),
            project_id=project_id,
            username=chat.username,
            is_admin_verified=is_admin
        )
        
        if channel:
            status_text = "‚úÖ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if is_admin else "‚ùì –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            await message.answer(
                f"‚úÖ **–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω** {status_text}\n\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {channel['name']}\n"
                f"**ID:** `{channel['chat_id']}`",
                parse_mode="Markdown"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def remove_channel_direct(message: Message, user: dict, lang: str, identifier: str):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é"""
    project_id = user.get("current_project")
    if not project_id:
        await message.answer(TEXTS[lang]['channels_not_found'])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"remove_channel_direct:{identifier}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="remove_channel_cancel")
        ]
    ])
    
    await message.answer(
        TEXTS[lang]['channels_remove_confirm'].format(name=identifier),
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("remove_channel_confirm:"))
async def confirm_remove_channel(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    project_id = user.get("current_project")
    
    channel_id = callback.data.split(":", 1)[1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel = supabase_db.db.get_channel(int(channel_id))
        if not channel:
            await callback.message.edit_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
        if supabase_db.db.remove_channel(project_id, channel_id):
            await callback.message.edit_text(
                f"‚úÖ **–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω**\n\n"
                f"**{channel['name']}** –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.\n"
                f"–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.",
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data.startswith("remove_channel_direct:"))
async def confirm_remove_channel_direct(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    project_id = user.get("current_project")
    
    identifier = callback.data.split(":", 1)[1]
    
    if supabase_db.db.remove_channel(project_id, identifier):
        await callback.message.edit_text(TEXTS[lang]['channels_removed'])
    else:
        await callback.message.edit_text(TEXTS[lang]['channels_not_found'])
    
    await callback.answer()

@router.callback_query(F.data == "remove_channel_cancel")
async def cancel_remove_channel(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    await callback.message.edit_text(TEXTS[lang]['confirm_post_cancel'])
    await callback.answer()

@router.callback_query(F.data.startswith("channel_manage:"))
async def manage_specific_channel(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    channel_id = int(callback.data.split(":", 1)[1])
    channel = supabase_db.db.get_channel(channel_id)
    
    if not channel:
        await callback.message.edit_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    admin_status = "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if channel.get('is_admin_verified') else "‚ùì –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
    
    text = (f"‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º**\n\n"
            f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {channel['name']}\n"
            f"**ID:** `{channel['chat_id']}`\n"
            f"**–°—Ç–∞—Ç—É—Å:** {admin_status}\n")
    
    if channel.get('username'):
        text += f"**Username:** @{channel['username']}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞", callback_data=f"check_admin:{channel_id}")],
        [InlineKeyboardButton(text="üìã –ü–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞", callback_data=f"channel_posts:{channel_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"remove_channel_confirm:{channel_id}")],
        [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤", callback_data="channels_list")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("check_admin:"))
async def check_single_channel_admin(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    channel_id = int(callback.data.split(":", 1)[1])
    channel = supabase_db.db.get_channel(channel_id)
    
    if not channel:
        await callback.message.edit_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await callback.bot.get_chat_member(channel['chat_id'], callback.bot.id)
        is_admin = chat_member.status in ['administrator', 'creator']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        supabase_db.db.update_channel_admin_status(channel_id, is_admin)
        
        status = "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else "‚ùå –ù–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        text = (f"üîÑ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
                f"**–ö–∞–Ω–∞–ª:** {channel['name']}\n"
                f"**–°—Ç–∞—Ç—É—Å:** {status}")
        
        if not is_admin:
            text += "\n\n‚ö†Ô∏è –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤."
        
    except Exception as e:
        text = (f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏**\n\n"
                f"**–ö–∞–Ω–∞–ª:** {channel['name']}\n"
                f"**–û—à–∏–±–∫–∞:** {str(e)}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"channel_manage:{channel_id}")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("channel_posts:"))
async def show_channel_posts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    channel_id = int(callback.data.split(":", 1)[1])
    channel = supabase_db.db.get_channel(channel_id)
    
    if not channel:
        await callback.message.edit_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞
    posts = supabase_db.db.list_posts_by_channel(channel_id)
    
    if not posts:
        text = f"üìã **–ü–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞ {channel['name']}**\n\n‚ùå –ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        text = f"üìã **–ü–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞ {channel['name']}**\n\n"
        for i, post in enumerate(posts[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            status = "‚úÖ" if post.get('published') else "‚è∞" if post.get('publish_time') else "üìù"
            text += f"{i}. {status} {post.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:30]}...\n"
        
        if len(posts) > 10:
            text += f"\n... –∏ –µ—â–µ {len(posts) - 10} –ø–æ—Å—Ç–æ–≤"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"channel_manage:{channel_id}")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()
